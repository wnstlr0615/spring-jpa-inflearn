## 6. JPA 프로그래밍 프로젝트 세팅
의존성 추가
properties 설정
datasource.url
datasource.username
datasource.password

spring.jpa.hibernate.ddl-auto=create

# update 사용 시 주의
기존 변수 삭제시 테이블에 칼럼 명이 남는다.
변수 명 변경시 기존 변수 칼럼은 유지되고 새로운 칼럼이 추가된다.
===========================================================
7.	JPA 프로그래밍: 엔티티 맵핑
@Entity
●	“엔티티”는 객체 세상에서 부르는 이름.
●	보통 클래스와 같은 이름을 사용하기 때문에 값을 변경하지 않음.
●	엔티티의 이름은 JQL에서 쓰임.

@Table
●	“릴레이션" 세상에서 부르는 이름.
●	@Entity의 이름이 기본값.
●	테이블의 이름은 SQL에서 쓰임.

@Id
●	엔티티의 주키를 맵핑할 때 사용.
●	자바의 모든 primitive 타입과 그 랩퍼 타입을 사용할 수 있음
○	Date랑 BigDecimal, BigInteger도 사용 가능.
●	복합키를 만드는 맵핑하는 방법도 있지만 그건 논외로..

@GeneratedValue
●	주키의 생성 방법을 맵핑하는 애노테이션
●	생성 전략과 생성기를 설정할 수 있다.
○	기본 전략은 AUTO: 사용하는 DB에 따라 적절한 전략 선택
○	TABLE, SEQUENCE, IDENTITY 중 하나.

@Column
●	unique
●	nullable
●	length
●	columnDefinition
●	...

@Temporal
●	현재 JPA 2.1까지는 Date와 Calendar만 지원.

@Transient
===========================================================
8.	JPA 프로그래밍: Value 타입 맵핑

@Embedded와 @Embeddable 사용
@AttributeOverrides 와 @AttributeOverride
같은 부류의 변수들을 새로운 클래스를 생성하여 표기하는 방법
중복 특성을 가지는 변수들을 중복 생성하는 방법
===========================================================
9.	JPA 프로그래밍: 1대다 맵핑
관계에 주인은 다쪽이 가진다.
일 대 다 단방향 매핑
다 대 일 단방향 매핑

일 대 다 양방향 매핑
양방향 매핑시 @OneToMany 에 관계에 주인 설정

양방향 관계시 관계를 형성하는 구문을 하나의 메소드로  묶어서 생성
 public void addStudy(Study study) {
        this.getStudies().add(study);
        study.setOwner(this);
    }
    public void removeStudy(Study study) {
        this.getStudies().remove(study);
        study.setOwner(null);
    }
===========================================================
10.	JPA 프로그래밍: Cascade
 @OneToMany(mappedBy = "post", cascade = CascadeType.ALL )
    private Set<Comment> comments=new HashSet<>();

    cascade를 사용할 경우 객체에 변화에 따라 자동으로 전파

===========================================================
11.	JPA 프로그래밍: Fetch

oneToMany에 경우 기본 적으로 fetch가 lazy로 적용 되어 있다.
ManyToOne은 Eager 이다.
===========================================================
12.	JPA 프로그래밍: Query
/* TypeSafe 하지 않음

    TypedQuery<Post> query = entityManager.createQuery("select p from Post as p", Post.class);
    List<Post> posts = query.getResultList();
    posts.forEach(System.out::println);
    */

//TypeSafe한 방법
    CriteriaBuilder builder = entityManager.getCriteriaBuilder();
    CriteriaQuery<Post> query = builder.createQuery(Post.class);
    Root<Post> root = query.from(Post.class);
    query.select(root);
    List<Post> posts = entityManager.createQuery(query).getResultList();
    posts.forEach(System.out::println);

    다음과 같이 쿼리를 사용할 수도 있다.

===========================================================
13.	스프링 데이터 JPA 소개 및 원리
JpaRepository를 상속 받아 스프링데이터 JPA 사용
상속 받아 사용하기 때문에 테스트 코드를 추가로 작성 해주지 않아도 된다.
===========================================================
2부: 스프링 데이터 JPA 활용
15.	스프링 데이터 JPA 활용 파트 소개
16.	스프링 데이터 Common: Repository


@DataJpaTest 와 h2 Database에 scope를 test로 설정할 경우
h2데이터 베이스를 사용하여 테스트 검사

Page<Post> postPage = postRepository.findAll(PageRequest.of(0, 10));
다음과 같이 page로 반환 하여 받을 수 있음

Page<Post> findByTitleContains(String title, Pageable pageable);
다음과 같이 커스텀 쿼리 사용 가능 하다.
===========================================================
17.	스프링 데이터 Common: Repository 인터페이스 정의하기

@RepositoryDefinition(domainClass = Comment.class, idClass=Long.class)어노테이션을 사용하여
커스텀 한 Repository 만들기

===========================================================
18.	스프링 데이터 Common: Null 처리하기

스프링 데이터는 단일 데이터의 경우 Optional로 반환 가능
Optional의 경우 테스트 코드 작성 시
assertThat(byId).isEmpty(); 비어 있는 지 검사 한다.  (Null로 검사 하지 않음);
스프링5 부터 @NonNull, @Nullable 사용 가능
===========================================================
19.	스프링 데이터 Common: 쿼리 만들기 개요
스프링 데이터 저장소의 메소드 이름으로 쿼리 만드는 방법
●	메소드 이름을 분석해서 쿼리 만들기 (CREATE)
●	미리 정의해 둔 쿼리 찾아 사용하기 (USE_DECLARED_QUERY)
●	미리 정의한 쿼리 찾아보고 없으면 만들기 (CREATE_IF_NOT_FOUND)
===========================================================
20.	스프링 데이터 Common: 쿼리 만들기 실습
 List<Comment> findByCommentContainsIgnoreCase(String keyword); //대소문자 구별하지 않음
List<Comment> findByCommentContainsIgnoreCaseAndLikeCountGreaterThan(String keyword, int likeCount ); //대소문자 구별x, likeCount 보다 큰 Comment
List<Comment> findByCommentContainsIgnoreCaseOrderByLikeCountDesc(String keyword); //대소문자 구별 x, likeCount 내림차순
Page<Comment> findByCommentContainsIgnoreCaseAndLikeCountGreaterThanEqual(String keyword, int like, Pageable pageable);// 페이징 처리

메소드를 사용하여 조건쿼리 생성
===========================================================
21.	스프링 데이터 Common: 비동기 쿼리

비동기 쿼리
@Async Future<User> findByFirstname(String firstname);
@Async CompletableFuture<User> findOneByFirstname(String firstname);
@Async ListenableFuture<User> findOneByLastname(String lastname);
●	해당 메소드를 스프링 TaskExecutor에 전달해서 별도의 쓰레드에서 실행함.
●	Reactive랑은 다른 것임

권장하지 않는 이유
●	테스트 코드 작성이 어려움.
●	코드 복잡도 증가.
●	성능상 이득이 없음.
○	DB 부하는 결국 같고.
○	메인 쓰레드 대신 백드라운드 쓰레드가 일하는 정도의 차이.
○	단, 백그라운드로 실행하고 결과를 받을 필요가 없는 작업이라면 @Async를 사용해서 응답 속도를 향상 시킬 수는 있다.

===========================================================

22.	스프링 데이터 Common: 커스텀 리포지토리

@Repository
@Transactional
public class PostCustomRepositoryImpl  implements PostCustomRepository<Post>{

Impl 클래스를 사용하여 리포지토리를 커스텀하게 사용

기존 있는 메소드 사용시 새로 덮어쓰기가 가능해진다.

===========================================================
24.	스프링 데이터 Common: 도메인 이벤트
Post에 대한 이벤트 생성
1. ApplicationEvent 를 상속 하는 PostPublishedEvent 클래스 생성
2. 이벤트 요청 발생 시 이벤트를 처리 하는 PostListener 생성

applicationContext 를 사용 하여 이벤트 발생 (class Post extends AbstractAggregateRoot<Post> 를 사용 하는 방법이 더 좋아 보임)
PostPublishedEvent postPublishedEvent=new PostPublishedEvent(post);
applicationContext.publishEvent(postPublishedEvent);

PostListener 클래스
 class PostListener implements ApplicationListener<PostPublishedEvent> 다음 과 같이 ApplicationListener를 구현하거나
 메소드에 @EventListene를 붙여 준다.

@Import(PostRepositoryTestConfig.class) // slice 테스트 이므로 빈을 따로 등록해주어야 한다(@Componet 빈은 등록되지 않음)


PostRepositoryTestConfig
 @Bean
    public PostListener postListener(){
        return new PostListener();
    }

    //PostListener 생성 하지 않고 만드는 방법
    @Bean
    public ApplicationListener<PostPublishedEvent> postPublishedEventApplicationListener(){
        return event -> {
                System.out.println("=================================");
                System.out.println(event.getPost()+" is published");
                System.out.println("=================================");
        };
    }
===========================================================
25.	스프링 데이터 Common: QueryDSL
QueryDSL 연동 방법
1. 의존성 추가
리파지토리에 QuerydslPredicateExecutor<E> 상속
QAccount account=QAccount.Account;
 Predicate predicate= account
                .firstName.containsIgnoreCase("joon")
                .and(account.lastName.startsWith("choi"));
//Predicate 문을 만들고 findOne에 전달
        Optional<Account> one = accountRepository.findOne(predicate);
        assertThat(one).isEmpty();
커스텀 객체는 강의 참조

===========================================================
27.	스프링 데이터 Common: Web 2부: DomainClassConverter

스프링데이터 Common에서 도메인을 자동으로 변환해준다.
GetMapping("/posts/{id}")
public String getPost(@PathVariable Long  id){
    Optional<Post> byId = postRepository.findById(id);
    Post post=byId.get();
    return post.getTitle();
}

//다음과 같은 기존 요청 시  id를 입력 받아 찾은 후 반환해줘야하지만
도메인으로 등록한 경우
@GetMapping("/posts1/{id}")
public String getPost1(@PathVariable("id") Post  post){
    return post.getTitle();
}
자동으로 다음과 같이 변환해준다.
===========================================================
28.	스프링 데이터 Common: Web 3부: Pageable과 Sort 매개변수

@GetMapping("/posts")
public Page<Post> getPosts(Pageable pageable){
    return postRepository.findAll(pageable);
}

pageable를 사용하여 데이터를 다음과 같이 요청 할 수 있다.
===========================================================
29.	스프링 데이터 Common: Web 4부: HATEOAS

스프링 HATEOAS 사용 방법
1. 의존성 추가
2.   PagedResourcesAssembler<Post>를 매개변수에 추가하여 다음과 같이 추가
@GetMapping("/posts")
public PagedModel<EntityModel<Post>> getPosts(Pageable pageable, PagedResourcesAssembler<Post> assembler){
    return assembler.toModel(postRepository.findAll(pageable));
}
===========================================================
31.	스프링 데이터 JPA: JPA Repository

JpaRepository 사용 시 @EnableJpaRepositories 를 붙여줘야 한다.
하지만 spring boot 사용 시 자동으로 붙여 진다.
===========================================================
32.	스프링 데이터 JPA: 엔티티 저장하기
save() 사용 시 반환되는 객체를 사용하는 것이 항상 Persistent이기 때문에 안전하다.
Post post=new Post();
post.setTitle("hello");
Post updatePost=postrepository.save(post);
updatePost.setTitle("update"); <- Petsistent상태이기 때문에 자동으로 update 됨
===========================================================
33.	스프링 데이터 JPA: 쿼리 메소드
엔티티에 @namedQuery등록해서 사용 할 수도 있다.
@NamedQuery(name = "Post.finBytTitle", query = "SELECT  p from Post as p where p.title=?1")
@Query(value="select * from Post as p where p.title=?1", nativeQuery=true) 메소드에 쿼리를 붙여서도 사용 가능
===========================================================
34.	스프링 데이터 JPA: 쿼리 메소드 Sort
매개변수에 Sort를 추가하여 정렬
List<Post> findAll(Sort sort);
JpaSort.unsafe("LENGTH(title)") JpaSort를 사용하여 변환 한 값에 대해서 정렬 가능(강의 참조)

